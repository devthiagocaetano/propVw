@use "sass:list";
@use "sass:math";
@use 'propvw-controller'as controller;

$-big-desk-size: 1920 !default;
$-desk-size: 1366 !default;
$-tab-size: 768 !default;
$-mob-size: 375 !default;

$-big-desk-unit: 1px !default;
$-desk-unit: 1vw !default;
$-tab-unit: 1vw !default;
$-mob-unit: 1vw !default;

$-mob-min-width: null !default;
$-mob-max-width: 640px !default;
$-tab-min-width: 641px !default;
$-tab-max-width: 1280px !default;
$-desk-min-width: 1281px !default;
$-desk-max-width: 1919px !default;
$-big-desk-min-width: 1920px !default;
$-big-desk-max-width: null !default;

$-breakpoints: ("mobile": "(max-width: #{$-mob-max-width})",
  "tablet": "(min-width: #{$-tab-min-width}) and (max-width: #{$-tab-max-width})",
  "desktop": "(min-width: #{$-desk-min-width})",
  "small_desktop": "(min-width: #{$-desk-min-width}) and (max-width: #{$-desk-max-width})",
  "big_desktop": "(min-width: #{$-big-desk-min-width})",
  "only_screen": "only screen",
  "only_print": "only print",
);

$-mobile-first: false !default;
$-debugger: false !default;
$-active-context: null;
$-active-unit: null;


@mixin media($args...) {
  $query: "";

  @each $arg in $args {
    $separator: "";

    @if ($query !="") {
      $separator: " and ";
    }

    $query: controller.getBreakpoint($-breakpoints, $arg);
    @include setActiveContext($arg);

    @media #{$query} {
      @content;
    }
  }

}

@mixin style($prop: null, $value: null, $elem: &) {

  @if $prop==null and $value==null {
    @error "faltam valores na funcao testando;";
  }

  @if $-active-context and $-active-unit {
    @include controller.writeProp($prop, $value, $-active-context, $-active-unit);
  }

  @else if $-mobile-first {
    @include controller.writeProp($prop, $value, $-mob-size, $-mob-unit);
  }

  @else if $-desk-unit==$-big-desk-unit {
    @include controller.writeProp($prop, $value, $-big-desk-size, $-big-desk-unit);
  }

  @else {
    @include controller.writeProp($prop, $value, $-big-desk-size, $-big-desk-unit);

    @include media('small_desktop') {
      @include controller.writeProp($prop, $value, $-desk-size, $-desk-unit);
    }

  }

  $-active-context: null !global;
  $-active-unit: null !global;
}

@mixin calc($prop, $value1, $value2: 100%, $important: false) {
  $newSize: (($value1 / ($-mob-size / 100)) * $-mob-unit);

  @if $important {
    #{$prop}: calc(#{$value2} - #{$newSize}) !important;
  }

  @else {
    #{$prop}: calc(#{$value2} - #{$newSize});
  }

  @include breakpoint.tablet {
    $newSize: (($value1 / ($-tab-size / 100)) * $-tab-unit);

    @if $important {
      #{$prop}: calc(#{$value2} - #{$newSize}) !important;

    }

    @else {
      #{$prop}: calc(#{$value2} - #{$newSize});
    }
  }

  @include breakpoint.desktop {
    $newSize: (($value1 / ($-desk-size / 100)) * $-desk-unit);

    @if $important {
      #{$prop}: calc(#{$value2} - #{$newSize}) !important;

    }

    @else {
      #{$prop}: calc(#{$value2} - #{$newSize});
    }
  }

  @include breakpoint.big-desktop {
    $newSize: (($value1 / ($-big-desk-size / 100)) * $-big-desk-unit);

    @if $important {
      #{$prop}: calc(#{$value2} - #{$newSize}) !important;

    }

    @else {
      #{$prop}: calc(#{$value2} - #{$newSize});
    }
  }

}

@mixin multicolor-icon($svg-string: null, $width: null, $height: null, $colors...) {
  @if $-debugger {
    @debug 'multicolor-icon disparado';
    @debug '$svg-string: #{$svg-string}';
    @debug '$width: #{$width}';
    @debug '$height: #{$height}';
    @debug '$colors: #{$colors}';
  }

  @if ($svg-string==null or $width==null or $height==null) {
    @error 'You must pass an SVG string, width and height as first parameters, respectively';
  }

  $-colors-param-count: list.length($colors);
  $-colors-string-count: controller.countTerm($svg-string, 'fill:');

  @if $-colors-param-count !=$colors-string-count {
    @warn 'You must pass the exactly amount of colors as parameters, respectively. Param Count: #{$-colors-param-count} | String Count: #{$-colors-string-count}';
    @include controller.applyDefaulColors($svg-string);
  }

}

@mixin configureLayoutSize($big-desk-size: null, $desk-size: null, $tab-size: null, $mob-size: null) {
  $-big-desk-size: $big-desk-size !global;
  $-desk-size: $desk-size !global;
  $-tab-size: $tab-size !global;
  $-mob-size: $mob-size !global;
}

@mixin configureUnitSize($big-desk-unit: null, $desk-unit: null, $tab-unit: null, $mob-unit: null) {
  $-big-desk-unit: $big-desk-unit !global;
  $-desk-unit: $desk-unit !global;
  $-tab-unit: $tab-unit !global;
  $-mob-unit: $mob-unit !global;
}

@mixin configureBreakpoints($mob-min-width: null, $mob-max-width: null, $tab-min-width: null, $tab-max-width: null, $desk-min-width: null, $desk-max-width: null, $big-desk-min-width: null, $big-desk-max-width: null) {
  $-mob-min-width: $mob-min-width !global;
  $-mob-max-width: $mob-max-width !global;
  $-tab-min-width: $tab-min-width !global;
  $-tab-max-width: $tab-max-width !global;
  $-desk-min-width: $desk-min-width !global;
  $-desk-max-width: $desk-max-width !global;
  $-big-desk-min-width: $big-desk-min-width !global;
  $-big-desk-max-width: $big-desk-max-width !global;
}

// HIDDEN FUNCTIONS ON FORWARD
@mixin setActiveContext($breakpoint: null) {
  @if $breakpoint==null {
    @error 'setActiveContext need breakpoint parameter.';
  }

  @if $breakpoint=='mobile' {
    $-active-context: $-mob-size !global;
    $-active-unit: $-mob-unit !global;
  }

  @else if $breakpoint=='tablet' {
    $-active-context: $-tab-size !global;
    $-active-unit: $-tab-unit !global;
  }

  @else if $breakpoint=='desktop'or $breakpoint=='small_desktop' {
    $-active-context: $-desk-size !global;
    $-active-unit: $-desk-unit !global;
  }

  @else if $breakpoint=='big_desktop' {
    $-active-context: $-big-desk-size !global;
    $-active-unit: $-big-desk-unit !global;
  }

  @else if $-mobile-first {
    $-active-context: $-mob-size !global;
    $-active-unit: $-mob-unit !global;
  }

  @else {
    $-active-context: $-big-desk-size !global;
    $-active-unit: $-big-desk-unit !global;
  }
}